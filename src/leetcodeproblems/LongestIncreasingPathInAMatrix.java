/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package leetcodeproblems;

/**
 *
 * @author Mauri-Laptop
 */
public class LongestIncreasingPathInAMatrix {

    public void test() {
        int[][] mat = {
            {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
            {19, 18, 17, 16, 15, 14, 13, 12, 11, 10},
            {20, 21, 22, 23, 24, 25, 26, 27, 28, 29},
            {39, 38, 37, 36, 35, 34, 33, 32, 31, 30},
            {40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
            {59, 58, 57, 56, 55, 54, 53, 52, 51, 50},
            {60, 61, 62, 63, 64, 65, 66, 67, 68, 69},
            {79, 78, 77, 76, 75, 74, 73, 72, 71, 70},
            {80, 81, 82, 83, 84, 85, 86, 87, 88, 89},
            {99, 98, 97, 96, 95, 94, 93, 92, 91, 90},
            {100, 101, 102, 103, 104, 105, 106, 107, 108, 109},
            {119, 118, 117, 116, 115, 114, 113, 112, 111, 110},
            {120, 121, 122, 123, 124, 125, 126, 127, 128, 129},
            {139, 138, 137, 136, 135, 134, 133, 132, 131, 130},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };

        int[][] nums2 = {{4, 18, 5, 16, 7, 8, 0, 1, 19, 14, 4, 5, 14, 19, 11, 14, 6, 4, 3, 13, 18, 15, 6, 12, 15, 11, 6, 5, 19}, {15, 8, 13, 10, 16, 12, 19, 17, 1, 19, 17, 18, 14, 13, 10, 0, 1, 18, 19, 12, 10, 13, 13, 5, 0, 7, 3, 18, 5}, {15, 2, 16, 0, 10, 17, 2, 18, 6, 6, 4, 4, 8, 10, 10, 11, 19, 16, 18, 2, 17, 8, 2, 1, 4, 15, 1, 18, 5}, {12, 1, 6, 9, 1, 14, 6, 2, 7, 6, 4, 15, 12, 4, 13, 12, 10, 13, 9, 7, 7, 9, 2, 7, 12, 15, 14, 15, 7}, {12, 0, 17, 1, 1, 6, 1, 12, 9, 17, 0, 6, 5, 18, 14, 15, 3, 17, 16, 9, 14, 0, 8, 15, 12, 13, 14, 3, 11}, {17, 11, 5, 3, 2, 1, 10, 17, 16, 7, 14, 4, 5, 17, 6, 8, 11, 8, 9, 19, 19, 2, 18, 17, 3, 16, 19, 6, 11}, {17, 9, 19, 5, 4, 13, 10, 1, 19, 19, 17, 1, 2, 2, 13, 6, 7, 0, 13, 19, 8, 12, 10, 19, 0, 5, 3, 19, 15}, {13, 18, 13, 16, 11, 2, 7, 12, 15, 12, 3, 17, 9, 13, 1, 11, 2, 18, 5, 19, 7, 19, 0, 14, 2, 6, 1, 8, 7}, {11, 7, 14, 7, 13, 14, 3, 17, 16, 7, 18, 15, 10, 10, 9, 16, 10, 19, 17, 0, 0, 5, 2, 16, 14, 8, 8, 8, 19}, {1, 0, 19, 1, 12, 12, 3, 11, 1, 14, 6, 17, 5, 8, 8, 5, 8, 1, 11, 2, 16, 1, 9, 6, 6, 18, 18, 3, 12}, {3, 18, 3, 3, 18, 1, 18, 10, 2, 3, 19, 8, 17, 10, 6, 8, 6, 12, 2, 19, 7, 6, 0, 16, 14, 13, 6, 8, 5}, {13, 16, 3, 13, 8, 12, 12, 12, 18, 5, 4, 8, 4, 19, 19, 0, 10, 14, 16, 17, 13, 16, 6, 17, 1, 1, 14, 5, 0}, {18, 15, 13, 18, 0, 14, 14, 6, 11, 14, 0, 6, 14, 11, 13, 2, 9, 4, 3, 9, 1, 11, 5, 9, 14, 10, 17, 5, 15}, {19, 1, 6, 11, 15, 0, 12, 8, 13, 6, 8, 8, 15, 8, 19, 9, 15, 1, 9, 2, 16, 6, 3, 12, 3, 5, 18, 15, 1}, {14, 18, 1, 18, 15, 15, 9, 5, 12, 8, 2, 7, 3, 2, 11, 10, 11, 15, 3, 3, 9, 13, 9, 12, 17, 17, 10, 8, 2}, {5, 16, 5, 19, 15, 15, 1, 14, 3, 7, 4, 11, 1, 17, 9, 12, 7, 3, 15, 0, 10, 18, 0, 1, 5, 8, 3, 16, 18}, {19, 0, 7, 10, 13, 0, 6, 0, 10, 6, 19, 10, 3, 15, 16, 7, 1, 11, 3, 9, 9, 14, 17, 15, 9, 6, 8, 7, 1}, {5, 15, 11, 19, 9, 16, 17, 5, 0, 14, 9, 8, 1, 13, 19, 3, 17, 14, 7, 18, 4, 0, 10, 13, 16, 9, 6, 9, 13}, {7, 10, 17, 10, 18, 3, 15, 7, 3, 10, 14, 12, 19, 8, 3, 15, 1, 8, 16, 19, 11, 16, 1, 13, 16, 16, 3, 15, 8}, {0, 8, 4, 13, 5, 12, 2, 17, 6, 14, 4, 1, 17, 2, 4, 1, 2, 3, 12, 7, 3, 10, 10, 14, 7, 5, 14, 7, 5}, {14, 9, 2, 12, 1, 11, 7, 9, 17, 5, 12, 9, 8, 10, 8, 18, 18, 5, 7, 9, 15, 8, 14, 2, 12, 2, 10, 3, 11}, {6, 16, 2, 12, 9, 3, 3, 4, 0, 16, 11, 10, 8, 0, 4, 14, 13, 8, 8, 9, 17, 3, 4, 3, 2, 14, 19, 7, 0}, {17, 13, 13, 10, 11, 15, 7, 19, 6, 16, 6, 0, 5, 5, 5, 2, 11, 5, 18, 14, 17, 13, 1, 6, 16, 12, 11, 18, 4}, {11, 7, 7, 6, 4, 1, 1, 17, 0, 16, 11, 13, 15, 10, 14, 17, 12, 15, 2, 6, 10, 10, 13, 1, 19, 0, 6, 18, 4}, {7, 14, 4, 10, 12, 7, 13, 16, 2, 13, 14, 1, 2, 10, 3, 13, 0, 4, 1, 4, 4, 6, 18, 3, 2, 18, 15, 16, 11}, {15, 13, 4, 0, 4, 5, 0, 2, 0, 14, 2, 5, 12, 5, 6, 11, 18, 16, 5, 16, 19, 5, 9, 7, 10, 17, 19, 16, 4}, {9, 14, 2, 12, 17, 17, 1, 5, 12, 5, 12, 10, 0, 17, 9, 2, 7, 11, 1, 5, 4, 0, 19, 15, 16, 3, 10, 4, 8}, {2, 6, 16, 19, 6, 17, 14, 18, 3, 3, 0, 16, 13, 15, 6, 5, 5, 2, 0, 19, 7, 5, 10, 11, 9, 16, 3, 18, 5}, {15, 13, 16, 9, 0, 14, 10, 12, 15, 7, 0, 4, 4, 10, 2, 3, 3, 14, 8, 19, 16, 2, 2, 12, 15, 13, 18, 12, 11}, {12, 4, 17, 18, 14, 7, 11, 16, 17, 14, 4, 9, 1, 15, 18, 10, 11, 1, 9, 16, 4, 17, 7, 12, 12, 7, 12, 2, 18}, {19, 14, 5, 10, 14, 5, 9, 2, 7, 0, 0, 2, 2, 2, 3, 18, 16, 1, 16, 18, 6, 9, 18, 11, 16, 11, 9, 13, 3}, {4, 4, 5, 11, 6, 5, 12, 7, 7, 19, 1, 18, 17, 11, 4, 6, 6, 9, 16, 17, 4, 19, 0, 16, 1, 0, 15, 5, 1}, {7, 18, 17, 13, 3, 6, 18, 1, 11, 15, 11, 5, 3, 11, 18, 14, 1, 8, 19, 16, 2, 6, 15, 7, 2, 13, 4, 19, 19}, {12, 1, 1, 18, 2, 6, 9, 16, 18, 8, 6, 7, 18, 11, 4, 14, 4, 14, 18, 7, 6, 1, 15, 12, 8, 10, 11, 13, 5}, {6, 8, 11, 18, 10, 14, 15, 10, 5, 5, 15, 0, 17, 17, 18, 18, 3, 1, 11, 17, 17, 9, 8, 10, 11, 17, 5, 11, 6}, {19, 0, 3, 4, 8, 0, 14, 17, 4, 1, 18, 15, 5, 7, 16, 10, 7, 3, 11, 6, 10, 8, 0, 17, 15, 12, 15, 2, 0}, {18, 5, 12, 8, 16, 3, 13, 11, 13, 19, 2, 0, 0, 2, 16, 5, 17, 6, 13, 3, 14, 9, 9, 12, 19, 19, 17, 1, 15}, {2, 17, 1, 10, 0, 2, 13, 4, 15, 15, 17, 11, 4, 13, 1, 13, 5, 3, 12, 13, 14, 11, 18, 12, 15, 15, 10, 5, 13}, {4, 3, 6, 18, 13, 1, 3, 19, 5, 6, 8, 5, 18, 6, 6, 3, 14, 12, 3, 8, 0, 0, 11, 16, 5, 19, 0, 6, 13}};
        int[][] nums3 = {{9, 9, 4}, {6, 6, 8}, {2, 1, 1}};
        System.out.println(longestIncreasingPath(mat));
    }

    public int longestIncreasingPath(int[][] matrix) {
        int max = 0;
        int[][] dp = new int[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                max = Math.max(max, dfs(matrix, i, j, Integer.MIN_VALUE, dp));
            }
        }
        return max;
    }

    private int dfs(int[][] matrix, int i, int j, int prev, int[][] dp) {
        if (i < 0 || j < 0 || i >= matrix.length || j >= matrix[0].length || matrix[i][j] <= prev ) {
            return 0;
        }
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        int m1 = dfs(matrix, i + 1, j, matrix[i][j], dp);
        int m2 = dfs(matrix, i - 1, j, matrix[i][j], dp);
        int m3 = dfs(matrix, i, j + 1, matrix[i][j], dp);
        int m4 = dfs(matrix, i, j - 1, matrix[i][j], dp);

        int max = Math.max(m1, m2);
        max = Math.max(max, m3);
        max = Math.max(max, m4);
        dp[i][j] = max + 1;
        return max + 1;
    }
}
